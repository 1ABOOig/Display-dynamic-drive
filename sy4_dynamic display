/**********************************************************************
*                 公司名称：成都世纪中科仪器有限公司				  *
*                 模块名称：main.c 								      *
*                 程序设计：袁杰       							      *
*                 设计时间：2010.08.20        						  *
*                 版 本 号: 20100820								  *
***********************************************************************
*                         基本描述
*    采用的主控芯片51系列单片机，时钟晶振32MHZ

				   LED点阵显示模块基本描述

* 1)硬件信息： 
* 由8X8共阳LED屏构成64x48点阵LED屏。74LS244芯片作为缓冲接口芯片，接收控制板
* 传送过来的LED屏行列驱动信号，并输出到行串行移位寄存器4015和列串行移位驱动
* 芯片6B595。行串行移位寄存器4015将行选通信号送到大功率行驱动芯片APM4953。
* APM4953驱动LED屏的阳极。6B595吸收LED屏阴极的电流。


  注意：1、行扫描信号低电平有效
        2、列数据信号高电平有效（6B595输出带有反相的功能）
		3、复位是对行信号作用的，复位后行信号全部为低，处于全亮状态，无法起
		   到复位和清屏的作用，清屏可以通过向4015连续写入48个1来保证行扫描信
		   号全部为高，而不显示
		4、字节倒序取模时数据是左低右高，送数据则应该是高位在前；
 2)口线信息：  
sbit  MCSDI = P1^1 ;                   //   显示数据 （每列的选通信号，数据为高时，对应的象素点亮）
sbit  MCCLK = P1^2 ;                   //  	列移位时钟即点时钟 （上升沿触发）
sbit  MCOE  = P1^3 ;                   // 	亮度控制 （即列信号的输出使能控制，低电平有效）
sbit  MCST  = P1^4 ;                   // 	数据锁存 （即列信号的数据锁存控制，上升沿锁存）



sbit  MRRST = P1^5 ;                   // 	行清零（清屏）	 (高电平有效，清零后所有行信号为低电平，全亮)
sbit  MRSDI = P1^6 ;                   // 	帧信号（每行的选通信号，数据为低时，对应的行点亮）
sbit  MRCLK = P1^7 ;                   // 	行扫描时钟

**********************************************************************/

#include"reg52.h"  

/**********************************************************************
                       LED模块的硬件定义和配置常数                 
**********************************************************************/

sbit  MCSDI = P1^1 ;                                   //   显示数据 （每列的选通信号，数据为高时，对应的象素点亮）
sbit  MCCLK = P1^2 ;                                   //  	列移位时钟即点时钟 （上升沿触发）
sbit  MCOE  = P1^3 ;                                   // 	亮度控制 （即列信号的输出使能控制，低电平有效）
sbit  MCST  = P1^4 ;                                   // 	数据锁存 （即列信号的数据锁存控制，上升沿锁存）


													  
sbit  MRRST = P1^5 ;                                   // 	行清零（清屏）	 (高电平有效，清零后所有行信号为低电平，全亮)
sbit  MRSDI = P1^6 ;                                   // 	帧信号（每行的选通信号，数据为低时，对应的行点亮）
sbit  MRCLK = P1^7 ;                                   // 	行扫描时钟

//  常数定义


#define LED_HANG     48		                            // 定义LED显示屏的高度，即行数 	 


#define LED_LIE      64	   	                            // 定义LED显示屏的宽度，即列数 	 


#define LED_HANG_DATA_NUM   (LED_LIE/8)	                // 定义LED显示屏每一行的显示数据个数，以字节为单位，以本显示屏为例，每行的数据为8字节

#define LED_DATA_NUM        ((LED_HANG*LED_LIE)/8)	    // 定义LED显示屏的显示数据个数，以字节为单位，以本显示屏为例，全屏显示数据为384字节
                  

/**********************************************************************
*                      主模块内部函数的定义                           *
**********************************************************************/

void  LARGE_LED_Init(void);                               // LED显示屏的初始化程序

void  LED_DISP_Picture( unsigned char *ptr);              // 显示64*48的图片的程序 

void  LED_Send_Lie(unsigned char  send_buf);              // 送出一字节列信号的程序

/**********************************************************************
*                      主模块内部全局变量的定义                       *
**********************************************************************/

//  图片数据的每行起始地址，本显示屏的大小为64(列)*48（行），每行的数据为8字节
//  在切换到下一行显示时，起始地址加8即可，加到384（64/8*48）后显示完一屏的数据

unsigned int  LEDHangNum;	               

//  显示数据的场计数单元，本显示屏的大小为64(列)*48（行），每48行后送出一个场信号
//  实际上作为了行移位寄存器的数据输入

unsigned int  LEDChangNum;

/**********************************************************************
*                           显示图片数据                              *
**********************************************************************/

// 关键字Code 表示是存放在ROM区域


// 

unsigned char code Bmp1[]=
{
/*------------------------------------------------------------------------------
;  ?????,?????????,??????????????????
;  ??? / ?? : C:\Users\Administrator\Desktop\234124.bmp
;  ??(??): 64?8
;  ????/?? : ????????,????,????/384??
;  ??????  : 2021/10/15 10:37:14
------------------------------------------------------------------------------*/
//0x40,0x30,0x08,//?????,?????,?????,??????
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0xFE,0x7F,0x00,0x00,
0x00,0x80,0x00,0x02,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0xFE,0x03,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x82,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x04,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x08,0x00,0x00,0x00,0x40,0x08,0x01,
0x00,0x08,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x10,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x10,0x00,0x00,0x00,0xC0,0x03,0x04,0x00,0x20,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x20,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x40,0x00,0x00,0x00,0x40,0x0C,0x03,
0x00,0x40,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,
0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,
0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,0x00,0x80,0xFF,0x1F,0xFF,0x7F,0x00,0x00,
0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


 //

unsigned char code Bmp2[]=
{
/*------------------------------------------------------------------------------
;  ?????,?????????,??????????????????
;  ??? / ?? : C:\Users\Administrator\Desktop\123.bmp
;  ??(??): 64?8
;  ????/?? : ????????,????,????/384??
;  ??????  : 2021/10/15 10:36:11
------------------------------------------------------------------------------*/
//0x40,0x30,0x08,//?????,?????,?????,??????
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0xFE,0x7F,0x00,0x00,
0x00,0x80,0x00,0x02,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0xFE,0x03,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x90,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x20,
0x00,0x80,0x00,0x00,0x00,0x40,0x48,0x10,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x08,
0x00,0x80,0x00,0x00,0x00,0x40,0xF0,0x04,0x00,0x80,0x00,0x00,0x00,0x40,0x08,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x80,0x00,0x00,0x00,0xC0,0x03,0x04,0x00,0x80,0x00,0x00,0x00,0x40,0x02,0x74,
0x00,0x80,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x0C,0x03,
0x00,0x80,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x48,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x0C,
0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x10,0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x02,0x00,0x80,0x00,0x40,0x02,0x40,0x10,0x00,
0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,
0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,0x00,0x80,0xFF,0x7F,0xFE,0x7F,0x00,0x00,
0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


unsigned char code Bmp3[]=
{
/*------------------------------------------------------------------------------
;  ?????,?????????,??????????????????
;  ??? / ?? : C:\Users\Administrator\Desktop\234124.bmp
;  ??(??): 64?8
;  ????/?? : ????????,????,????/384??
;  ??????  : 2021/10/15 10:37:14
------------------------------------------------------------------------------*/
//0x40,0x30,0x08,//?????,?????,?????,??????
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0xFE,0x7F,0x00,0x00,
0x00,0x80,0x00,0x02,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0xFE,0x03,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x82,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x04,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x08,0x00,0x00,0x00,0x40,0x08,0x01,
0x00,0x08,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x10,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x10,0x00,0x00,0x00,0xC0,0x03,0x04,0x00,0x20,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x20,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x40,0x00,0x00,0x00,0x40,0x0C,0x03,
0x00,0x40,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,
0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,
0x00,0x80,0x00,0x10,0x01,0x40,0x00,0x00,0x00,0x80,0xFF,0x1F,0xFF,0x7F,0x00,0x00,
0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


 //

unsigned char code Bmp4[]=
{
/*------------------------------------------------------------------------------
;  ?????,?????????,??????????????????
;  ??? / ?? : C:\Users\Administrator\Desktop\123.bmp
;  ??(??): 64?8
;  ????/?? : ????????,????,????/384??
;  ??????  : 2021/10/15 10:36:11
------------------------------------------------------------------------------*/
//0x40,0x30,0x08,//?????,?????,?????,??????
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0xFE,0x7F,0x00,0x00,
0x00,0x80,0x00,0x02,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0xFE,0x03,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x90,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x20,
0x00,0x80,0x00,0x00,0x00,0x40,0x48,0x10,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x08,
0x00,0x80,0x00,0x00,0x00,0x40,0xF0,0x04,0x00,0x80,0x00,0x00,0x00,0x40,0x08,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x02,0x04,
0x00,0x80,0x00,0x00,0x00,0xC0,0x03,0x04,0x00,0x80,0x00,0x00,0x00,0x40,0x02,0x74,
0x00,0x80,0x00,0x00,0x00,0x40,0x04,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x0C,0x03,
0x00,0x80,0x00,0x00,0x00,0x40,0xF0,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,
0x00,0x80,0x00,0x00,0x00,0x40,0x48,0x02,0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x0C,
0x00,0x80,0x00,0x00,0x00,0x40,0x88,0x10,0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x01,
0x00,0x80,0x00,0x00,0x00,0x40,0x10,0x02,0x00,0x80,0x00,0x40,0x02,0x40,0x10,0x00,
0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,
0x00,0x80,0x00,0x40,0x02,0x40,0x00,0x00,0x00,0x80,0xFF,0x7F,0xFE,0x7F,0x00,0x00,
0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,
0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

/********************************************************************** 
/*                        系统主函数                                  *
/*********************************************************************/ 


int main(void)

  {
		unsigned int i;
	  unsigned char *BmpPtr;                               // 设置一个指向图片显示数据的指针
     
	  LARGE_LED_Init();                                    // 引脚初始化
	
	  BmpPtr = Bmp1;                                       // 初始化显示图片指针 
	  
	  while(1)
	  {
	for(i=0;i<=15;i++)	
		{
			BmpPtr = Bmp1;
		LED_DISP_Picture(BmpPtr);
		}
	for(i=30;i>15;i--)
			{
			BmpPtr = Bmp2; 
		LED_DISP_Picture(BmpPtr);
			}
	for(i=0;i<=15;i++)	
		{
			BmpPtr = Bmp3;
		LED_DISP_Picture(BmpPtr);
		}
	for(i=30;i>15;i--)
			{
			BmpPtr = Bmp4; 
		LED_DISP_Picture(BmpPtr);
			}
    } 
		
		  
 
 }



/******************** LED点阵显示相关模块相关程序 ***************************/

 
/******************************************************************** 

 函 数 名：LARGE_LED_Init()
 功    能：初始化大屏幕LED屏
 说    明：模块的外部函数，提供给主程序调用
 入口参数：无
 返 回 值：无  
 其他：    1)
***********************************************************************/

void  LARGE_LED_Init(void)
 {
      
   
	
       MCSDI = 0 ;                      //  显示数据 （每列的选通信号，数据为高时，对应的象素点亮）
       MCCLK = 0 ;                      //  移位时钟 （上升沿触发）
       MCOE  = 1 ;                      // 	亮度控制 （即列信号的输出使能控制，低电平有效）
       MCST  = 0 ;                      // 	数据锁存 （即列信号的数据锁存控制，上升沿锁存）



       MRRST = 0 ;                      // 	行清零（清屏）	 (高电平有效，清零后所有行信号为低电平，全亮)
       MRSDI = 1 ;                      // 	帧信号（每行的选通信号，数据为低时，对应的行点亮）
       MRCLK = 0;                       // 	行扫描时钟



 }




/********************************************************************** 

 函 数 名：LED_DISP_Picture( unsigned char *ptr)
 功    能：显示一幅64*48的图片
 说    明：模块的内部函数，提供给本模块其他程序调用
 入口参数：*ptr:指向显示图片数据的指针
 返 回 值：无  
 其他：    
***********************************************************************/ 
 

void LED_DISP_Picture( unsigned char *ptr)
{
    	

	unsigned char i;
	
    LEDHangNum   = 0;                   			   //  LED显示屏每行起始地址初始化，实质为点计数

    LEDChangNum  = 0;								   //  LED显示屏场信号计数单元初始化，实质为行计数

    
do
  {
	 //  每行显示数据倒序送出，每个字节内部是高位先送
	 //  对应的取模方式：从左到右，字节倒序	
    
		 for(i=7;i!=0x0FF;i--)	                       // 循环8次，送完一行的数据
	
	     {			             
		   LED_Send_Lie( ptr[ LEDHangNum + i ] );      //  字节倒序，则每个字节内部是高位先送

		   MCOE =1;                                    //  MCOE =1;关闭显示	   （只在显示送完一行的8个数据就灭显示，亮度最弱）
         }

        
	      

	      // MCOE =1;                                  //  MCOE =1;关闭显示    （ 在显示送完一行的64个数据就灭显示，亮度最强）
	      
		   // 	先送场移位信号和时钟，再锁存数据，这样可以避免下一行的数据在上一行形成显示的余晖

		  if (LEDChangNum ==0 )                        // 场信号,只有一个低电平信号，其余为高电平，形成移位的效果
	       {					                       // 只需第一次送出一个低电平，其余保持高电平即可
	          MRSDI = 0;                               // MRSDI = 0;		                
	       }
	      else
	      {
		      MRSDI = 1; ;                             // MRSDI = 1;
	      }							     
		  
		   //  送场移位时钟

		   	      
	       MRCLK = 0;                                  //  MRCLK=0; 行时钟
          	
	       MRCLK = 1;	                               //  MRCLK=1;		          
         	  
	       MRCLK = 0;                                  //  MRCLK=0;

		 
		   //  锁存，将本行的信号锁存，这样在下一行数据送入5B595的过程中，上一行数据可以保存继续显示（即上一行
		   //  数据的显示）时间是下一行数据的移位时间，显示和移位可以同时进行，节约时间；
		   
		   MCST  = 0;                                  // MCST  = 0,列信号锁存
	    
	       MCST  = 1;                                  // MCST  = 1
	      
	       MCST  = 0;	                               // MCST  = 0	

		   MCOE   =0;                                  //  MCOE =0; 使能显示	  
		            
	       LEDChangNum++ ;                             //  场序号加1		  
										   
	       LEDHangNum = LEDHangNum + LED_HANG_DATA_NUM;//  显示数据切换到下一行
	


  }while( LEDHangNum  < (LED_DATA_NUM -1) );           //   一屏数据显示完重新开始 

}




/********************************************************************** 

 函 数 名：LED_Send_Lie(unsigned char  send_buf)
 功    能：送出列信号
 说    明：模块的内部函数，提供给本模块其他程序调用
 入口参数：send_buf：向LED写入的字符
 返 回 值：无  
 其他：    1.采用上升沿写入数的SPI时序，先在数据线上放入要发送的数据，再在
             时钟线上形成上升沿来锁存数据到595的移位接收寄存器。
           2.先送出的数据出现在级联信号的最后面
		   3.列数据信号高电平有效（6B595输出带有反相的功能）
		   4.字节高位先送出，适用于数据字节倒序的取模方式
***********************************************************************/ 
 

void LED_Send_Lie(unsigned char  send_buf)
{
	
         

	 //  高位在前送数
     unsigned char  i;	 
     
     	 
	 MCCLK = 0 ;                        // MCCLK = 0 ; 移位时钟 （上升沿触发）

      for(i=8;i!=0;i--)
          {
              if((send_buf&0x80)==0x80)
                {
                 
				  MCSDI = 1 ;           // MCSDI = 1 ; 显示数据 （每列的选通信号，数据为高时，对应的象素点亮）  
			    
                 }
              else
	            {									  
                 
				  MCSDI = 0 ;           // MCSDI = 0 ; 显示数据 （每列的选通信号，数据为高时，对应的象素点亮）   
                 
                }
              send_buf=send_buf<<1;
             
			  MCCLK = 1 ;               // MCCLK = 1 ; 移位时钟 （上升沿触发）
              	
			  MCCLK = 0 ;               // MCCLK = 0 ; 移位时钟 （上升沿触发）
              
          }
       


    
}  






	 	  


